name: SonarQube
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ "dev", "prod" ] # «апуск при создании pull request, нацеленного на ветку 'dev'

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - uses: actions/setup-dotnet@v4
        with:
            dotnet-version: 9.0.x
      - name: Change directory to solution folder
        run: cd ./ScanPerson

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
          dir .\.sonar
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin `
            /k:${{ env.SONAR_PROJECT_KEY }} `
            /o:${{ env.SONAR_ORGANIZATION }} `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.token="${{ env.SONAR_TOKEN }}" `
            /d:sonar.cs.opencover.reportsPaths=".\ScanPerson\TestResults\opencover.xml" `
            /d:sonar.coverage.exclusions="**/*.cs"

          dotnet restore ./ScanPerson/ScanPerson.sln
          dotnet build --no-restore ./ScanPerson/ScanPerson.sln

          # Command dotnet test for run tests and generate coverage report
          dotnet test --no-build `
            --verbosity normal --logger trx `
            /p:CollectCoverage=true `
            /p:CoverletOutputFormat=opencover `
            /p:CoverletOutput=./ScanPerson/TestResults/ `
            --results-directory ./ScanPerson/TestResults/ `
            ./ScanPerson/ScanPerson.sln

          .\.sonar\scanner\dotnet-sonarscanner end `
          /d:sonar.token="${{ env.SONAR_TOKEN }}"