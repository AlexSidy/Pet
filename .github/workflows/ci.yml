# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Full CI/CD and SonarQube Analysis

on:
  pull_request:
    branches: [ "dev", "prod" ]
  push:
    branches: [ "dev", "prod" ]

jobs:
  build-and-analyze:

    name: Build, Test, and Analyze
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Needed for SonarQube

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    # - name: Change directory to solution folder
    #   run: cd ./ScanPerson

    # - name: Setup JDK 17
    #   uses: actions/setup-java@v4
    #   with:
    #     java-version: 17
    #     distribution: 'zulu'

    # - name: Clean build artifacts
    #   run: |
    #     find . -type d -name "bin" -exec rm -rf {} +
    #     find . -type d -name "obj" -exec rm -rf {} +
    # - name: Clear NuGet cache
    #   run: dotnet nuget locals all --clear

    # - name: Clean solution
    #   run: |
    #       dotnet clean ./ScanPerson/ScanPerson.sln
    #       dotnet clean ./Identity/Identity.sln

    - name: Restore dependencies
      run: |
        dotnet restore ./ScanPerson/ScanPerson.sln
        dotnet restore ./Identity/Identity.sln
          
    - name: Build
      run: |
        dotnet build --no-restore ./ScanPerson/ScanPerson.sln
        dotnet build --no-restore ./Identity/Identity.sln

    - name: Run Tests and Generate Coverage
      run: |
        dotnet test ./ScanPerson/ScanPerson.sln --no-build --verbosity normal --collect "XPlat Code Coverage" --results-directory ".\TestResults"
        dotnet test ./Identity/Identity.sln --no-build --verbosity normal --collect "XPlat Code Coverage" --results-directory ".\TestResults"
        
          # dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage" --logger "trx;LogFileName=ScanPersonIntegration.trx" --results-directory "./TestResults" ./ScanPerson/Tests/ScanPerson.Integration.Tests/ScanPerson.Integration.Tests.csproj
          # dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage" --logger "trx;LogFileName=ScanPersonUnit.trx" --results-directory "./TestResults" ./ScanPerson/Tests/ScanPerson.Unit.Tests/ScanPerson.Unit.Tests.csproj
          # dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage" --logger "trx;LogFileName=IdentityIntegration.trx" --results-directory "./TestResults" ./Identity/Tests/Identity.Integration.Tests/Identity.Integration.Tests.csproj
          # dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage" --logger "trx;LogFileName=IdentityUnit.trx" --results-directory "./TestResults" ./Identity/Tests/Identity.Unit.Tests/Identity.Unit.Tests.csproj

          # # dotnet tool install --global dotnet-coverage && dotnet-coverage merge ./TestResults/*.cobertura.xml --recursive --output ./TestResults/merged.cobertura.xml --output-format cobertura --remove-input-files

    - name: Merge Coverage Reports
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:./TestResults/**/coverage.cobertura.xml -targetdir:./TestResults/ -reporttypes:Cobertura

    # - name: Upload dotnet test results
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: dotnet-results
    #     path: ./TestResults/merged.cobertura.xml
    #   # Use always() to always run this step to publish test results when there are test failures
    #   if: ${{ always() }

    # - name: Cache SonarQube Cloud packages
    #   uses: actions/cache@v4
    #   with:
    #     path: ~\sonar\cache
    #     key: ${{ runner.os }}-sonar
    #     restore-keys: ${{ runner.os }}-sonar
    # - name: Cache SonarQube Cloud scanner
    #   id: cache-sonar-scanner
    #   uses: actions/cache@v4
    #   with:
    #     path: .\.sonar\scanner
    #     key: ${{ runner.os }}-sonar-scanner
    #     restore-keys: ${{ runner.os }}-sonar-scanner
    # - name: Install SonarQube Cloud scanner
    #   if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
    #   shell: powershell
    #   run: |
    #     New-Item -Path .\.sonar\scanner -ItemType Directory
    #     dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
    #     dir .\.sonar
    - name: SonarScanner Build and Analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
        SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
      run: |
        dotnet tool install -g dotnet-sonarscanner
        dotnet sonarscanner begin `
          /k:${{ env.SONAR_PROJECT_KEY }} `
          /o:${{ env.SONAR_ORGANIZATION }} `
          /d:sonar.host.url="https://sonarcloud.io" `
          /d:sonar.token="${{ env.SONAR_TOKEN }}" `
          /d:sonar.cs.opencover.reportsPaths="./TestResults/merged-coverage/Cobertura.xml"
          # /d:sonar.cs.opencover.reportsPaths="./TestResults/merged-coverage/Cobertura.xml" `
          # /d:sonar.coverage.exclusions="**/*.cs"
        
        dotnet build ./ScanPerson/ScanPerson.sln
        dotnet build ./Identity/Identity.sln
        
        dotnet sonarscanner end `
          /d:sonar.token="${{ env.SONAR_TOKEN }}"

