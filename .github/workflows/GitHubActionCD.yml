# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Push to VM, Build and UP Docker Compose

on:
  pull_request:
    branches: [ "dev", "prod" ]
  push:
    branches: [ "dev", "prod" ]
  workflow_call:
  # can be triggered manually
  workflow_dispatch:
jobs:
  continuous-delivery:
  # add conditional only merged pull requests to prod
    # if: |
    #   ${{ (github.event.workflow_run.conclusion == 'success' &&
    #     github.event.workflow_run.head_branch == 'dev') ||
    #     github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Print a github.event.workflow_run.conclusion 
        run: echo github.event.workflow_run.conclusion - ${{ github.event.workflow_run.conclusion }}
      - name: Print a github.event.workflow_run.head_branch 
        run: echo github.event.workflow_run.head_branch - ${{ github.event.workflow_run.head_branch }}
      - name: Print a github.event_name 
        run: echo github.event_name - ${{ github.event_name }}
  
      - name: Checkout to the branch
        uses: actions/checkout@v4

      # Add step for clean directory in task #50

      # Copy files to VM
      - name: Copy files to VM
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "."
          target: "Repositories/Pet"
          rm: true

      # Deploy to VM and build containers
      - name: Deploy to VM and build containers
        uses: appleboy/ssh-action@v1.2.2
        env:
          #Common
          ASPNETCORE_ENVIRONMENT: ${{ vars.ASPNETCORE_ENVIRONMENT }}
          ASPNETCORE_Kestrel__Certificates__Default__Path: ${{ secrets.ASPNETCORE_KESTREL__CERTIFICATES__DEFAULT__PATH }}
          ASPNETCORE_Kestrel__Certificates__Default__Password: ${{ secrets.ASPNETCORE_KESTREL__CERTIFICATES__DEFAULT__PASSWORD }}
          JWT_OPTIONS_SECRET_KEY: ${{ secrets.JWT_OPTIONS_SECRET_KEY }}
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          PGADMIN_DEFAULT_EMAIL: ${{ secrets.PGADMIN_DEFAULT_EMAIL }}
          PGADMIN_DEFAULT_PASSWORD: ${{ secrets.PGADMIN_DEFAULT_PASSWORD }}
          PGADMIN_CONFIG_SERVER_MODE: ${{ vars.PGADMIN_CONFIG_SERVER_MODE }}

          # Graylog solution
          GRAYLOG_PASSWORD_SECRET: ${{ secrets.GRAYLOG_PASSWORD_SECRET }}
          GRAYLOG_ROOT_PASSWORD_SHA2: ${{ secrets.GRAYLOG_ROOT_PASSWORD_SHA2 }}

          # ScanPerson solution
          SCANPERSON_ALLOWED_HOSTS: ${{ vars.SCANPERSON_ALLOWED_HOSTS }}
          ConnectionStrings__ScanPersonDb: ${{ secrets.CONNECTIONSTRINGS__SCANPERSONDB }}
          SCANPERSON_POSTGRES_DB: ${{ vars.SCANPERSON_POSTGRES_DB }}
          IDENTITY_API_DOMEN: ${{ vars.IDENTITY_API_DOMEN }}
          SCANPERSON_WEBAPI_DOMEN: ${{ vars.SCANPERSON_WEBAPI_DOMEN }}
          HTMLWEBRU_API_KEY: ${{ secrets.HTMLWEBRU_API_KEY }}
          AUTO_MAPPER_LICENSE_KEY: ${{ secrets.AUTO_MAPPER_LICENSE_KEY }}
          SCANPERSON_PGDATA: ${{ vars.SCANPERSON_PGDATA }}

          # Identity solution
          IDENTITY_ALLOWED_HOSTS: ${{ vars.IDENTITY_ALLOWED_HOSTS }}
          ConnectionStrings__IdentityDb: ${{ secrets.CONNECTIONSTRINGS__IDENTITYDB }}
          IDENTITY_POSTGRES_DB: ${{ vars.IDENTITY_POSTGRES_DB }}
          IDENTITY_PGDATA: ${{ vars.IDENTITY_PGDATA }}
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Add step for clone repository for first deploy in task #50
            
            # Navigate to the project directory on the VM
            cd Repositories/Pet
            
            # Rebuild and restart the Docker Compose services for all solutions.
            # The --build flag forces Docker Compose to rebuild the images locally.

            # Configure docker before start
            if ! docker network ls | grep -q 'scanperson-network'; then
            echo "Create docker-network..."
            docker network create -d bridge scanperson-network
            else
            echo "Network docker-network is exists."
            fi

            # Graylog
            echo "Graylog build and up."
            cd Graylog
            GRAYLOG_PASSWORD_SECRET=${GRAYLOG_PASSWORD_SECRET} \
            GRAYLOG_ROOT_PASSWORD_SHA2=${GRAYLOG_ROOT_PASSWORD_SHA2} \
            docker compose up -d --build

            cd ..

            echo "Identity build and up."
            cd Identity
            ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT} \
            ASPNETCORE_Kestrel__Certificates__Default__Path=${ASPNETCORE_Kestrel__Certificates__Default__Path} \
            ASPNETCORE_Kestrel__Certificates__Default__Password=${ASPNETCORE_Kestrel__Certificates__Default__Password} \
            ALLOWED_HOSTS=${IDENTITY_ALLOWED_HOSTS} \
            JWT_OPTIONS_SECRET_KEY=${JWT_OPTIONS_SECRET_KEY} \
            ConnectionStrings__IdentityDb=${ConnectionStrings__IdentityDb} \
            POSTGRES_USER=${POSTGRES_USER} \
            POSTGRES_PASSWORD=${POSTGRES_PASSWORD} \
            POSTGRES_DB=${IDENTITY_POSTGRES_DB} \
            PGDATA=${IDENTITY_PGDATA} \
            PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL} \
            PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD} \
            PGADMIN_CONFIG_SERVER_MODE=${PGADMIN_CONFIG_SERVER_MODE} \
            docker compose up -d --build
            rm .env

            cd ..

            echo "ScanPerson build and up."
            cd ScanPerson
            IDENTITY_API_DOMEN=${IDENTITY_API_DOMEN} \
            SCANPERSON_WEBAPI_DOMEN=${SCANPERSON_WEBAPI_DOMEN} \
            ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT} \
            ASPNETCORE_Kestrel__Certificates__Default__Path=${ASPNETCORE_Kestrel__Certificates__Default__Path} \
            ASPNETCORE_Kestrel__Certificates__Default__Password=${ASPNETCORE_Kestrel__Certificates__Default__Password} \
            ALLOWED_HOSTS=${SCANPERSON_ALLOWED_HOSTS} \
            JWT_OPTIONS_SECRET_KEY=${JWT_OPTIONS_SECRET_KEY} \
            HTMLWEBRU_API_KEY=${HTMLWEBRU_API_KEY} \
            AUTO_MAPPER_LICENSE_KEY=${AUTO_MAPPER_LICENSE_KEY} \
            ConnectionStrings__ScanPersonDb=${ConnectionStrings__ScanPersonDb} \
            POSTGRES_USER=${POSTGRES_USER} \
            POSTGRES_PASSWORD=${POSTGRES_PASSWORD} \
            POSTGRES_DB=${SCANPERSON_POSTGRES_DB} \
            PGDATA=${PGDATA} \
            PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL} \
            PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD} \
            PGADMIN_CONFIG_SERVER_MODE=${PGADMIN_CONFIG_SERVER_MODE} \
            docker compose up -d --build
            rm .env
